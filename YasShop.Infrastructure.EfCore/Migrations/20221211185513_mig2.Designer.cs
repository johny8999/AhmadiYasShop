// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YasShop.Infrastructure.EfCore.Context;

#nullable disable

namespace YasShop.Infrastructure.EfCore.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20221211185513_mig2")]
    partial class mig2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("YasShop.Domain.Category.Entities.tblCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("TopicId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("tblCategory");
                });

            modelBuilder.Entity("YasShop.Domain.Category.Entities.tblCategoryTranslates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImgId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LangId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("tblCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("tblLanguagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("tblCategoryId");

                    b.HasIndex("tblLanguagesId");

                    b.ToTable("tblCategoryTranslates");
                });

            modelBuilder.Entity("YasShop.Domain.FileManager.FilePath.Entities.tblFilePath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileServerId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("FileServerId");

                    b.ToTable("tblFilePath");
                });

            modelBuilder.Entity("YasShop.Domain.FileManager.FilesAgg.Entities.tblFiles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("FilePathId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileTypeId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("SizeOnDisk")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FilePathId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("tblFiles");
                });

            modelBuilder.Entity("YasShop.Domain.FileManager.FileServers.Entities.tblFileServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Capacity")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FtpData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpDomain")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HttpPath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tblFileServer");
                });

            modelBuilder.Entity("YasShop.Domain.FileManager.FileTypes.Entity.tblFileTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Extentions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tblFileTypes");
                });

            modelBuilder.Entity("YasShop.Domain.Region.CityAgg.Entity.tblCities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("ProvinceId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("tblCities");
                });

            modelBuilder.Entity("YasShop.Domain.Region.CountryAgg.Entity.tblContries", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlagImgId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FlagImgId")
                        .IsUnique();

                    b.ToTable("tblContries");
                });

            modelBuilder.Entity("YasShop.Domain.Region.LanguageAgg.Entities.tblLanguages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("UseForSiteLanguage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tblLanguages");
                });

            modelBuilder.Entity("YasShop.Domain.Region.ProvinceAgg.Entity.tblProvince", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("tblProvince");
                });

            modelBuilder.Entity("YasShop.Domain.Topics.Entities.tblTopics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tblTopics");
                });

            modelBuilder.Entity("YasShop.Domain.Users.AccessLevelAgg.Entities.tblAccessLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tblAccessLevel");
                });

            modelBuilder.Entity("YasShop.Domain.Users.AccessLevelAgg.Entities.tblAccessLevelRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessLevelId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.HasIndex("RoleId");

                    b.ToTable("tblAccessLevelRoles");
                });

            modelBuilder.Entity("YasShop.Domain.Users.AddressAgg.Entity.tblAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("CityId")
                        .HasMaxLength(150)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Plaque")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("tblAddress");
                });

            modelBuilder.Entity("YasShop.Domain.Users.RoleAgg.Entities.tblRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("YasShop.Domain.Users.UserAgg.Entities.tblUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("YasShop.Domain.Users.UserAgg.Entities.tblUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AccessLevelId")
                        .HasMaxLength(450)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OTPData")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("YasShop.Domain.Users.RoleAgg.Entities.tblRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("YasShop.Domain.Users.UserAgg.Entities.tblUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("YasShop.Domain.Users.UserAgg.Entities.tblUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("YasShop.Domain.Users.UserAgg.Entities.tblUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YasShop.Domain.Category.Entities.tblCategory", b =>
                {
                    b.HasOne("YasShop.Domain.Topics.Entities.tblTopics", "tblTopics")
                        .WithMany("tblCategory")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("tblTopics");
                });

            modelBuilder.Entity("YasShop.Domain.Category.Entities.tblCategoryTranslates", b =>
                {
                    b.HasOne("YasShop.Domain.Category.Entities.tblCategory", "tblCategory")
                        .WithMany("tblCategoryTranslates")
                        .HasForeignKey("tblCategoryId");

                    b.HasOne("YasShop.Domain.Region.LanguageAgg.Entities.tblLanguages", "tblLanguages")
                        .WithMany("tblCategoryTranslates")
                        .HasForeignKey("tblLanguagesId");

                    b.Navigation("tblCategory");

                    b.Navigation("tblLanguages");
                });

            modelBuilder.Entity("YasShop.Domain.FileManager.FilePath.Entities.tblFilePath", b =>
                {
                    b.HasOne("YasShop.Domain.FileManager.FileServers.Entities.tblFileServer", "tblFileServer")
                        .WithMany("tblFilePath")
                        .HasForeignKey("FileServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblFileServer");
                });

            modelBuilder.Entity("YasShop.Domain.FileManager.FilesAgg.Entities.tblFiles", b =>
                {
                    b.HasOne("YasShop.Domain.FileManager.FilePath.Entities.tblFilePath", "tblFilePath")
                        .WithMany("tblFiles")
                        .HasForeignKey("FilePathId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasShop.Domain.FileManager.FileTypes.Entity.tblFileTypes", "tblFileTypes")
                        .WithMany("tblFiles")
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblFilePath");

                    b.Navigation("tblFileTypes");
                });

            modelBuilder.Entity("YasShop.Domain.Region.CityAgg.Entity.tblCities", b =>
                {
                    b.HasOne("YasShop.Domain.Region.ProvinceAgg.Entity.tblProvince", "tblProvince")
                        .WithMany("tblCities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblProvince");
                });

            modelBuilder.Entity("YasShop.Domain.Region.CountryAgg.Entity.tblContries", b =>
                {
                    b.HasOne("YasShop.Domain.FileManager.FilesAgg.Entities.tblFiles", "tblFiles")
                        .WithOne("tblContries")
                        .HasForeignKey("YasShop.Domain.Region.CountryAgg.Entity.tblContries", "FlagImgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblFiles");
                });

            modelBuilder.Entity("YasShop.Domain.Region.ProvinceAgg.Entity.tblProvince", b =>
                {
                    b.HasOne("YasShop.Domain.Region.CountryAgg.Entity.tblContries", "tblContries")
                        .WithMany("tblProvince")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblContries");
                });

            modelBuilder.Entity("YasShop.Domain.Users.AccessLevelAgg.Entities.tblAccessLevelRoles", b =>
                {
                    b.HasOne("YasShop.Domain.Users.AccessLevelAgg.Entities.tblAccessLevel", "tblAccessLevel")
                        .WithMany("tblAccessLevelRoles")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasShop.Domain.Users.RoleAgg.Entities.tblRoles", "tblRole")
                        .WithMany("tblAccessLevelRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblAccessLevel");

                    b.Navigation("tblRole");
                });

            modelBuilder.Entity("YasShop.Domain.Users.AddressAgg.Entity.tblAddress", b =>
                {
                    b.HasOne("YasShop.Domain.Region.CityAgg.Entity.tblCities", "tblCities")
                        .WithMany("tblAddress")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YasShop.Domain.Users.UserAgg.Entities.tblUsers", "tblUsers")
                        .WithMany("tblAddress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblCities");

                    b.Navigation("tblUsers");
                });

            modelBuilder.Entity("YasShop.Domain.Users.RoleAgg.Entities.tblRoles", b =>
                {
                    b.HasOne("YasShop.Domain.Users.RoleAgg.Entities.tblRoles", "tblRoleParent")
                        .WithMany("tblRolesChilds")
                        .HasForeignKey("ParentId");

                    b.Navigation("tblRoleParent");
                });

            modelBuilder.Entity("YasShop.Domain.Users.UserAgg.Entities.tblUserRole", b =>
                {
                    b.HasOne("YasShop.Domain.Users.RoleAgg.Entities.tblRoles", "tblRole")
                        .WithMany("tblUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YasShop.Domain.Users.UserAgg.Entities.tblUsers", "tblUser")
                        .WithMany("tblUserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tblRole");

                    b.Navigation("tblUser");
                });

            modelBuilder.Entity("YasShop.Domain.Users.UserAgg.Entities.tblUsers", b =>
                {
                    b.HasOne("YasShop.Domain.Users.AccessLevelAgg.Entities.tblAccessLevel", "tblAccessLevel")
                        .WithMany("tblUsers")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("tblAccessLevel");
                });

            modelBuilder.Entity("YasShop.Domain.Category.Entities.tblCategory", b =>
                {
                    b.Navigation("tblCategoryTranslates");
                });

            modelBuilder.Entity("YasShop.Domain.FileManager.FilePath.Entities.tblFilePath", b =>
                {
                    b.Navigation("tblFiles");
                });

            modelBuilder.Entity("YasShop.Domain.FileManager.FilesAgg.Entities.tblFiles", b =>
                {
                    b.Navigation("tblContries");
                });

            modelBuilder.Entity("YasShop.Domain.FileManager.FileServers.Entities.tblFileServer", b =>
                {
                    b.Navigation("tblFilePath");
                });

            modelBuilder.Entity("YasShop.Domain.FileManager.FileTypes.Entity.tblFileTypes", b =>
                {
                    b.Navigation("tblFiles");
                });

            modelBuilder.Entity("YasShop.Domain.Region.CityAgg.Entity.tblCities", b =>
                {
                    b.Navigation("tblAddress");
                });

            modelBuilder.Entity("YasShop.Domain.Region.CountryAgg.Entity.tblContries", b =>
                {
                    b.Navigation("tblProvince");
                });

            modelBuilder.Entity("YasShop.Domain.Region.LanguageAgg.Entities.tblLanguages", b =>
                {
                    b.Navigation("tblCategoryTranslates");
                });

            modelBuilder.Entity("YasShop.Domain.Region.ProvinceAgg.Entity.tblProvince", b =>
                {
                    b.Navigation("tblCities");
                });

            modelBuilder.Entity("YasShop.Domain.Topics.Entities.tblTopics", b =>
                {
                    b.Navigation("tblCategory");
                });

            modelBuilder.Entity("YasShop.Domain.Users.AccessLevelAgg.Entities.tblAccessLevel", b =>
                {
                    b.Navigation("tblAccessLevelRoles");

                    b.Navigation("tblUsers");
                });

            modelBuilder.Entity("YasShop.Domain.Users.RoleAgg.Entities.tblRoles", b =>
                {
                    b.Navigation("tblAccessLevelRoles");

                    b.Navigation("tblRolesChilds");

                    b.Navigation("tblUserRoles");
                });

            modelBuilder.Entity("YasShop.Domain.Users.UserAgg.Entities.tblUsers", b =>
                {
                    b.Navigation("tblAddress");

                    b.Navigation("tblUserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
